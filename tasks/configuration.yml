---
- name: "Create Database for Wordpress."
  mysql_db:
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
    name: "{{ wordpress_db_name }}"
    encoding: utf8
    state: present

- name: "Create Database User for Wordpress."
  mysql_user:
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
    name: "{{ wordpress_db_user }}"
    password: "{{ wordpress_db_pw }}"
    priv: "{{ wordpress_db_name }}.*:ALL"
    append_privs: 'false'
    state: present

- name: "Create self-signed Certificate."
  command: 'openssl req -new -nodes -x509 -subj "{{ wordpress_self_signed_cert_subj }}" -days 365 -keyout {{ wordpress_self_signed_certificate_key }} -out {{ wordpress_self_signed_certificate }} -extensions v3_ca'
  args:
    creates: "{{ wordpress_self_signed_certificate }}"
  when: wordpress_create_self_signed_cert | bool

- name: Configure Apache PHP ini file for Wordpress.
  lineinfile:
    dest: "/etc/php/{{ php_major_version }}.{{ php_minor_version }}/{{ webserver_apache_name }}/conf.d/10-wordpress.ini"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    create: 'true'
    backup: 'false'
  with_items: "{{ wordpress_php_options }}"
  when: php_install_status_apache.stat.exists
  notify: "restart webserver {{ webserver_name }}"

- name: "Copy Wordpress Configuration File for Apache2."
  template:
    src: wordpress.conf.j2
    dest: "{{ apache2_http_site_dir }}/wordpress.conf"
    owner: root
    group: root
    mode: 0600
    backup: 'true'
    force: 'true'
  notify: "reload webserver {{ webserver_name }}"

- name: "Enable Apache2 Modules."
  apache2_module:
    name: "{{ item }}"
    state: present
  with_items: "{{ wordpress_apache2_modules }}"
  notify: restart webserver

- name: "Enable Wordpress Configuration."
  command: a2ensite wordpress.conf
  args:
    creates: "/etc/apache2/sites-enabled/wordpress.conf"
  notify: "reload webserver {{ webserver_name }}"
  when: ansible_os_family == "Debian"

- name: "Ensure Wordpress Scripts Directory exists."
  file:
    path: "{{ wordpress_scripts_dir }}"
    state: directory
    mode: 0750
    owner: root
    group: root

- name: "Copy the Wordpress Scripts."
  template:
    src: "{{ item }}"
    dest: "{{ wordpress_scripts_dir }}/{{ item }}"
    owner: root
    group: root
    mode: 0750
  with_items:
    - wordpress_set_secure_dir_perms.sh

- name: "Fetch random salts for wp-config.php."
  uri:
    url: https://api.wordpress.org/secret-key/1.1/salt/
    return_content: 'true'
  register: wp_salt

- name: "Upload Custom Configuration File."
  template:
    src: wp-config.php.j2
    dest: "{{ wordpress_web_dir }}/wp-config.php"
    owner: "{{ apache2_http_user }}"
    group: "{{ apache2_http_user }}"
    mode: 0600
    backup: 'true'
    force: 'true'

- name: "Upload Backup logrotate Configuration."
  template:
    src: wordpress_backup.logrotate.j2
    dest: /etc/logrotate.d/wordpress_backup
    mode: 0644
    owner: root
    group: root

- name: "Set Secure Permissions."
  shell: /bin/bash "{{ wordpress_scripts_dir }}/wordpress_set_secure_dir_perms.sh"
  args:
    chdir: /tmp/
    executable: /bin/bash

- name: "Upload Backup Script."
  template:
    src: wordpress_backup.sh.j2
    dest: "{{ wordpress_scripts_dir }}/wordpress_backup.sh"
    owner: root
    group: root
    mode: 0750
    backup: 'true'
    force: 'true'
  when: wordpress_backup | bool

- name: "Configure Backup Script Cron."
  cron:
    name: "Wordpress Backup"
    weekday: '3'  # Wednesday
    hour: '1'
    minute: '0'
    user: root
    job: "/bin/bash {{ wordpress_scripts_dir }}/wordpress_backup.sh"
    state: "{% if wordpress_backup %}present{% else %}absent{% endif %}"
